// Generated by CoffeeScript 1.7.1
(function() {
  var StaticHandlebarsCompiler, debug, fs, glob, handlebars, mkdirp, progeny, sysPath;

  handlebars = require("handlebars");

  sysPath = require("path");

  fs = require("fs");

  glob = require("glob");

  mkdirp = require("mkdirp");

  debug = require("debug")("brunch:staticHandlebars");

  progeny = require("progeny");

  module.exports = StaticHandlebarsCompiler = (function() {
    StaticHandlebarsCompiler.prototype.brunchPlugin = true;

    StaticHandlebarsCompiler.prototype.type = "template";

    StaticHandlebarsCompiler.prototype.extension = "hbs";

    function StaticHandlebarsCompiler(config) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      this.config = config;
      this.outputDirectory = ((_ref = this.config) != null ? (_ref1 = _ref.plugins) != null ? (_ref2 = _ref1.staticHandlebars) != null ? _ref2.outputDirectory : void 0 : void 0 : void 0) || 'public';
      this.staticData = ((_ref3 = this.config) != null ? (_ref4 = _ref3.plugins) != null ? (_ref5 = _ref4.staticHandlebars) != null ? _ref5.data : void 0 : void 0 : void 0) || {};
      this.rootPath = ((_ref6 = this.config) != null ? (_ref7 = _ref6.paths) != null ? _ref7.root : void 0 : void 0) || process.cwd();
      this.getDependencies = progeny({
        rootPath: this.rootPath,
        extension: 'hbs',
        extensionsList: ['hbs'],
        regexp: /^\s*\{\{> ([\w]*)\}\}/,
        exclusion: /a^/,
        prefix: ''
      });
    }

    StaticHandlebarsCompiler.prototype.withPartials = function(callback) {
      var errThrown, partials;
      partials = {};
      errThrown = false;
      return glob("app/templates/_*.hbs", (function(_this) {
        return function(err, files) {
          if (err != null) {
            return callback(err);
          } else if (!files.length) {
            return callback(null, partials);
          } else {
            return files.forEach(function(file) {
              var name;
              name = sysPath.basename(file, ".hbs").substr(1);
              return fs.readFile(file, function(err, data) {
                if ((err != null) && !errThrown) {
                  errThrown = true;
                  return callback(err);
                } else {
                  partials[name] = data.toString();
                  if (Object.keys(partials).length === files.length) {
                    return callback(null, partials);
                  }
                }
              });
            });
          }
        };
      })(this));
    };

    StaticHandlebarsCompiler.prototype.compile = function(data, path, callback) {
      var basename, err, template;
      try {
        basename = sysPath.basename(path, ".hbs");
        template = handlebars.compile(data);
        return this.withPartials((function(_this) {
          return function(err, partials) {
            var html, newPath;
            if (err != null) {
              return callback(err);
            } else {
              html = template(_this.staticData, {
                partials: partials,
                helpers: _this.makeHelpers(partials)
              });
              newPath = _this.outputDirectory + path.slice(13, -4) + ".html";
              mkdirp.sync(sysPath.dirname(newPath));
              debug('writing file', newPath);
              return fs.writeFile(newPath, html, function(err) {
                return callback(err, null);
              });
            }
          };
        })(this));
      } catch (_error) {
        err = _error;
        return callback(err, null);
      }
    };

    StaticHandlebarsCompiler.prototype.makeHelpers = function(partials) {
      return {
        partial: function(partial, options) {
          return new handlebars.SafeString(handlebars.compile(partials[partial])(options.hash));
        }
      };
    };

    return StaticHandlebarsCompiler;

  })();

}).call(this);
